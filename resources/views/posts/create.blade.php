@extends('layouts/layout')

@section ('pageTitle','New Post')

@section('content')

<h1 class="text-center">Create a New Post</h1>

<form method="POST" action="/posts" id="fileUpload" enctype="multipart/form-data">

    {{ csrf_field() }}

    <div class="form-group">

        <input type="hidden" class="postid" name="postid" id="postid" value="">


        <label for="titleInput">Title</label>
        <input id="titleInput" type="text" name="title" placeholder="Title" class="form-control {{ $errors->has('title') ? 'is-invalid' : ''}}" onchange="setSlugField(this.value)" value="{{ old('title') }}" required>
        <small class="form-text text-muted">Enter the post title here</small>
    </div>

    <div class="form-group">
        <label for="subtitleInput">Subtitle</label>
        <input id="subtitleInput" type="text" name="subtitle" placeholder="Subtitle" class="form-control {{ $errors->has('subtitle') ? 'is-invalid' : ''}}" value="{{ old('subtitle') }}" required>
        <small class="form-text text-muted">Enter the post subtitle here</small>
    </div>

    <div class="form-group">
        <label for="slugInput">Slug</label>
        <input id="slugInput" type="text" name="slug" placeholder="Slug" class="form-control {{ $errors->has('slug') ? 'is-invalid' : ''}}" value="{{ old('slug') }}" readonly required>
        <small class="form-text text-muted">Slug is an autogenerated field</small>
    </div>

    <div class="form-row">
        <div class=" col-6 form-group">
            <label for="categoriesInput">Categories</label>
            <select multiple name="categories[]" id="categoriesInput" class="form-control">
                @foreach ($categories as $cat)
                <option value="{{ $cat->id }}">{{ $cat->title }}</option>
                @endforeach
            </select>
            <small class="form-text text-muted">Hold down the Ctrl (windows) or Command (Mac) button to select multiple options.</small>
        </div>
        <div class="col-6 form-group">
            <label for="dateInput">Pub. Date</label>
            <input type="date" id="dateInput" name="publish_at" placeholder="Slect publication date" class="form-control {{ $errors->has('publish_at') ? 'is-invalid' : ''}}">
        </div>
    </div>

    <div class="form-group">
        <label for="contentInput">Content</label>
        <textarea id="contentInput" name="content" placeholder="Content" placeholder="Content" class="form-control {{ $errors->has('content') ? 'is-invalid' : ''}}" required>{{ old('content') }}</textarea>
        <small class="form-text text-muted">Content goes here</small>
    </div>

    <div class="form-group">
        <div class="custom-file mb-3">
            <input type="file" name="file" class="custom-file-input" id="validatedCustomFile">
            <label class="custom-file-label" for="validatedCustomFile">Choose file...</label>
        </div>
    </div>

    <!-- <div class="form-group">
        <div id="dropzoneDragArea" class="dz-default dz-message dropzoneDragArea">
            <span>Upload file</span>
        </div>
        <div class="dropzone-previews"></div>
    </div> -->

    <button type="submit" id="submit-all" class="btn btn-primary" style="width: 100%;">Create Post </button>


    @if ($errors->any())

    <div class="notification bg-danger mt-3 p-2" style="border-radius: 10px; color:white;">
        <ul>
            @foreach ($errors->all() as $error)

            <li>{{ $error }}</li>

            @endforeach
        </ul>
    </div>
    @endif

</form>

<!-- <script>
    Dropzone.autoDiscover = true;
    // Dropzone.options.demoform = false;	
    let token = document.getElementsByName('_token')[0].value;
    $(function() {
        var myDropzone = new Dropzone("div#dropzoneDragArea", {
            paramName: "file",
            url: "{{ url('/storeFile') }}",
            previewsContainer: 'div.dropzone-previews',
            addRemoveLinks: true,
            autoProcessQueue: false,
            uploadMultiple: false,
            parallelUploads: 1,
            maxFiles: 1,
            params: {
                _token: token
            },
            // The setting up of the dropzone
            init: function() {
                var myDropzone = this;
                //form submission code goes here
                $("#submit-all").click(function(event) {
                    //Make sure that the form isn't actully being sent.
                    event.preventDefault();
                    URL = '/posts';
                    formData = $('#demoform').serialize();
                    $.ajax({
                        type: 'POST',
                        url: URL,
                        data: formData,
                        success: function(result) {
                            if (result.status == "success") {
                                // fetch the useid 
                                var postid = result.post_id;
                                $("#postid").val(postid); // inseting userid into hidden input field
                                //process the queue
                                console.log(postid);
                                myDropzone.processQueue();
                            } else {
                                console.log("error");
                            }
                        }
                    });
                });
                //Gets triggered when we submit the image.
                this.on('sending', function(file, xhr, formData) {
                    //fetch the user id from hidden input field and send that userid with our image
                    let postid = document.getElementById('postid').value;
                    formData.append('postid', userid);
                });

                this.on("success", function(file, response) {
                    //reset the form
                    $('#demoform')[0].reset();
                    //reset dropzone
                    $('.dropzone-previews').empty();
                });
                this.on("queuecomplete", function() {

                });

                // Listen to the sendingmultiple event. In this case, it's the sendingmultiple event instead
                // of the sending event because uploadMultiple is set to true.
                this.on("sendingmultiple", function() {
                    // Gets triggered when the form is actually being sent.
                    // Hide the success button or the complete form.
                });

                this.on("successmultiple", function(files, response) {
                    // Gets triggered when the files have successfully been sent.
                    // Redirect user or notify of success.
                });

                this.on("errormultiple", function(files, response) {
                    // Gets triggered when there was an error sending the files.
                    // Maybe show form again, and notify user of error
                });
            }
        });
    });
</script> -->

@endsection